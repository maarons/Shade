#!/usr/bin/env python3
# Copyright (c) 2013 Marek Sapota
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE

from Shade.ArgParse import ArgParse

from Shade.bluetooth.Adapter import Adapter
from Shade.bluetooth.DeviceList import DeviceList

CMD_STATUS = 1
CMD_CONNECT = 2
CMD_DISCONNECT = 3
CMD_POWER = 4
CMD_TRUSTED = 5

parser = ArgParse(
    description = 'Manages bluetooth input devices',
)

subparsers = parser.add_subparsers()

parser_status = subparsers.add_parser(
    'status',
    aliases = ['st'],
    help = 'Show connected devices',
)
parser_status.set_defaults(cmd = CMD_STATUS)

parser_trusted = subparsers.add_parser(
    'trusted',
    help = 'Show trusted devices',
)
parser_trusted.set_defaults(cmd = CMD_TRUSTED)

parser_connect = subparsers.add_parser(
    'connect',
    aliases = ['co'],
    help = 'Connect a new device',
)
parser_connect.set_defaults(cmd = CMD_CONNECT)
parser_connect.add_argument(
    'device',
    choices = DeviceList.configured().names(),
    help = 'Device to connect',
)

parser_disconnect = subparsers.add_parser(
    'disconnect',
    aliases = ['dc'],
    help = 'Disconnect a device',
)
parser_disconnect.set_defaults(cmd = CMD_DISCONNECT)
parser_disconnect.add_argument(
    'device',
    choices = DeviceList.connected().names(),
    help = 'Device to disconnect',
)

parser_power = subparsers.add_parser(
    'power',
    aliases = ['p'],
    help = 'Change adapter power state',
)
parser_power.set_defaults(cmd = CMD_POWER)
parser_power.add_argument(
    'state',
    choices = ['on', 'off'],
    help = 'Desired power state',
)

args = parser.parse_args()

if args.cmd == CMD_STATUS:
    if Adapter.is_powered():
        print('Bluetooth adapter is on')
        print('Connected devices:')
        for device in DeviceList.connected():
            print(
                '-',
                device.get_addr(),
                device.get_name(),
                'trusted' if device.is_trusted() else '',
            )
    else:
        print('Bluetooth adapter is off')
elif args.cmd == CMD_TRUSTED:
    print('Trusted devices:')
    for device in DeviceList.trusted():
        print(
            '-',
            device.get_addr(),
            device.get_name() if device.is_configured() else 'NOT CONFIGURED',
        )
elif args.cmd == CMD_CONNECT:
    if not Adapter.is_powered():
        Adapter.turn_on()
    device = DeviceList.configured().get_by_name(args.device)
    if device.is_connected():
        print('Device is already connected')
    else:
        device.connect()
elif args.cmd == CMD_DISCONNECT:
    device = DeviceList.configured().get_by_name(args.device)
    if not device.disconnect():
        print('Falied to remove device')
elif args.cmd == CMD_POWER:
    cur_state = Adapter.is_powered()
    if args.state == 'on':
        if cur_state:
            print('Adapter is already on')
        else:
            Adapter.turn_on()
    else:
        if not cur_state:
            print('Adapter is already off')
        else:
            Adapter.turn_off()
