#!/usr/bin/env python3
# Copyright (c) 2011, 2012, 2013 Marek Sapota
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE

from Shade.open.Open import Open
from Shade.ArgParse import ArgParse

parser = ArgParse(
    description = 'Open files with remembered applications.'
)
parser.add_argument(
    'files',
    metavar = 'file',
    nargs = '*',
    help = 'file to open'
)
parser.add_argument('--mime', '-m', dest = 'mime')
parser.add_argument(
    '--app',
    '-a',
    dest = 'app',
    metavar = 'APPLICATION',
    help = 'set application for handling this mime type'
)
parser.add_argument(
    '--list',
    '-l',
    dest = 'list',
    action = 'store_true',
    help = 'list all remembered applicaitons'
)
parser.add_argument(
    '--forget',
    dest = 'forget',
    action = 'store_true',
    help = 'forget application handling this mime type'
)
parser.add_argument(
    '--first',
    dest = 'first',
    action = 'store_true',
    help = 'open first file in this directory'
)
parser.add_argument(
    '--background',
    '--bg',
    dest = 'background',
    action = 'store_true',
    help = 'run handling application in background'
)
args = parser.parse_args()

o = Open()

if args.list:
    o.list()
elif args.mime is not None and args.forget:
    o.remove_handler(args.mime)
    o.save()
elif args.mime is not None and args.app is not None:
    o.add_handler(args.mime, args.app)
    o.save()
elif args.first and args.app is not None:
    o.add_handler_for_first(args.app)
    o.save()
elif args.first:
    o.open_first(args.background)
elif len(args.files) == 1:
    file = args.files[0]
    if args.app is not None:
        o.add_handler_for_file(file, args.app)
        o.save()
    elif args.forget:
        o.remove_handler_for_file(file)
        o.save()
    else:
        o.open_file(file, args.background)
else:
    if args.app is not None:
        for file in args.files:
            o.add_handler_for_file(file, args.app)
        o.save()
    else:
        for file in args.files:
            o.open_file(file, True)
